package com.szkk.utils;import java.io.ByteArrayOutputStream;import java.io.DataOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.InputStream;import java.io.OutputStream;import java.net.HttpURLConnection;import java.net.URL;import java.util.UUID;import org.json.JSONObject;import android.util.Log;import com.szkk.data.KK;import com.szkk.net.delegate.FileUploadTaskDelegate;import com.szkk.system.ApplicationManager;import com.szkk.system.AppConfig;public class FileImageUpload {	private static final String TAG = "uploadFile";	private static final int TIME_OUT = 10 * 10000000;	private static final String CHARSET = "utf-8";	private static final String SUCCESS = "1";	private static final String FAILURE = "0";	private FileUploadTaskDelegate delegate;		public FileImageUpload( FileUploadTaskDelegate delegate){		this.delegate = delegate;	}		 public  void uploadFile(int id, File file)	    {	      String end ="\r\n";	      String twoHyphens ="--";	      String boundary ="*****";	      try	      {	        URL url =new URL(AppConfig.ROOT_URL + "users/upload_hand_image");	        HttpURLConnection con=(HttpURLConnection)url.openConnection();	        con.setDoInput(true);	        con.setDoOutput(true);    	        con.setUseCaches(false);  	        con.setRequestMethod("POST");	        con.setRequestProperty("Connection", "Keep-Alive");	        con.setRequestProperty("Charset", "UTF-8");	        con.setRequestProperty("Content-Type", "multipart/form-data;boundary="+boundary);	        String path = file.getAbsolutePath();			String subfex = path.substring(path.lastIndexOf("."), path.length());			path = path.substring(0, path.lastIndexOf("/"))  + "/" + id + subfex;			File target = new File(path);	        DataOutputStream ds =  new DataOutputStream(con.getOutputStream());	        ds.writeBytes(twoHyphens + boundary + end); 	        Log.i("tag2", "target name " + target.getName());	        ds.writeBytes("Content-Disposition: form-data; "+ "name=\"file1\"; filename=\""+ target.getName() +"\""+ end);	        ds.writeBytes(end);      	        FileInputStream fStream =new FileInputStream(file);	        int bufferSize =1024;	        byte[] buffer =new byte[bufferSize];	        int length =-1;	        while((length = fStream.read(buffer)) !=-1)	        {	          ds.write(buffer, 0, length);	        }	        ds.writeBytes(end);	        ds.writeBytes(twoHyphens + boundary + twoHyphens + end);	        fStream.close();	        ds.flush();	        InputStream inst = con.getInputStream();			byte[] b = new byte[1024];			int status = con.getResponseCode();			ByteArrayOutputStream bos = new ByteArrayOutputStream();			while((inst.read(b)) != -1){				bos.write(b);			}			String data = new String(bos.toByteArray(), "utf-8");			Log.e(TAG, "response data:" + data);			if (status == 200) {				delegate.didFinishUoload();			}else{				delegate.didFailedUpload();			}  	        /* 关闭DataOutputStream */	        ds.close();	      }	      catch(Exception e)	      {	    	  delegate.didFailedUpload();	    	  Log.i("TAG", "上传失败"+e);	      }	    }   }			/*	public void uploadFile(int id, File file) {		String BOUNDARY = UUID.randomUUID().toString();		// 边界标识 随机生成   		String PREFIX = "--", LINE_END = "\r\n";		String CONTENT_TYPE = "multipart/form-data";		// 内容类型   		try {			URL url = new URL(DeviceInfo.ROOT_URL + "users/upload_hand_image");			HttpURLConnection conn = (HttpURLConnection) url.openConnection();			conn.setReadTimeout(TIME_OUT);			conn.setConnectTimeout(TIME_OUT);			conn.setDoInput(true);			// 允许输入流			conn.setDoOutput(true);			// 允许输出流			conn.setUseCaches(false);			// 不允许使用缓存			conn.setRequestMethod("POST");			// 设置编码			conn.setRequestProperty("Charset", CHARSET);			// 请求方式			conn.setRequestProperty("connection", "keep-alive");			conn.setRequestProperty("Content-Type", CONTENT_TYPE + ";boundary=" + BOUNDARY);			if (file != null) {				OutputStream outputSteam = conn.getOutputStream();				DataOutputStream dos = new DataOutputStream(outputSteam);				StringBuffer sb = new StringBuffer();				sb.append(PREFIX);				sb.append(BOUNDARY);				sb.append(LINE_END);				String path = file.getAbsolutePath();				String subfex = path.substring(path.lastIndexOf("."), path.length());				path = path.substring(0, path.lastIndexOf("/"))  + "/" + id + subfex;				Log.i("tag1", path);				File target = new File(path);				FileOutputStream fos = new FileOutputStream(target);				byte[] bt = new byte[8];  				FileInputStream fis = new FileInputStream(file);				while((fis.read(bt)) != -1){					fos.write(bt);				}				fos.flush();				fos.close();				fis.close();				 				sb.append("Content-Disposition: form-data; name=\"file1\"; filename=\"" + target.getName() + "\"" + LINE_END);				sb.append(LINE_END);				dos.write(sb.toString().getBytes());  				InputStream is = new FileInputStream(target);				byte[] bytes = new byte[8];				while ((is.read(bytes)) != -1) {  					dos.write(bytes);				}				is.close();				dos.write(LINE_END.getBytes());				byte[] end_data = (PREFIX + BOUNDARY + PREFIX + LINE_END).getBytes();				dos.write(end_data);				dos.flush();				Log.i("tag2", "sb-> " + sb);								int res = conn.getResponseCode();				InputStream inst = conn.getInputStream();				byte[] b = new byte[1];				ByteArrayOutputStream bos = new ByteArrayOutputStream();				while((inst.read(b)) != -1){					bos.write(b);				}				String data = new String(bos.toByteArray(), "utf-8");				Log.e(TAG, "response data:" + data + "    res" + res);				//KK kk = new KK(new JSONObject(data));				//ApplicationManager.sharedManager().currentUser.getKkList().add(kk);								if (res == 200) {					delegate.didFinishUoload();				}else{					delegate.didFailedUpload();				}				dos.close();			}		} catch (Exception e) {			delegate.didFailedUpload();		}	}	*/