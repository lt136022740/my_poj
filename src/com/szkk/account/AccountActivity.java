package com.szkk.account;import java.util.Calendar;import java.util.regex.Matcher;import java.util.regex.Pattern;import org.json.JSONException;import org.json.JSONObject;import android.app.DatePickerDialog;import android.content.DialogInterface;import android.content.DialogInterface.OnDismissListener;import android.content.Intent;import android.os.Bundle;import android.view.View;import android.view.ViewGroup;import android.widget.Button;import android.widget.DatePicker;import android.widget.EditText;import android.widget.RadioGroup;import android.widget.RadioGroup.OnCheckedChangeListener;import android.widget.Spinner;import com.szkk.net.SZHttpRequestManager;import com.szkk.net.delegate.ModifyAccountTaskDelegate;import com.szkk.net.delegate.RegisteTaskDelegate;import com.szkk.system.ApplicationManager;import com.szkk.utils.LocalUtil;import com.szkk.utils.ViewUtil;import com.szkk.widget.DialogCommon;import com.szkk.widget.LoadingView;import com.szkk.www.MainActivity;import com.szkk.www.R;import com.szkk.www.SZActivity;public class AccountActivity extends SZActivity implements ModifyAccountTaskDelegate{	private EditText edit_name; 	private RadioGroup genderBtn;	private EditText edit_mail;	private Button button_year;	private Spinner province_spinner;	private Spinner city_spinner;	private Spinner county_spinner;	private EditText edit_address;	private EditText edit_phone_optional;	private EditText edit_mobile_optional;	private EditText edit_occupation_optional;	private EditText edit_homepage_optional;	private EditText edit_zipcode_optional;	private EditText edit_qq_optional;	private Button btnConfirm;	private Button btnClose;	private String gender;	private JSONObject data;	private boolean isFinished = true;	private DialogCommon dialogLoading;		@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		this.setContentView(R.layout.activity_account);		this.initView();	}	private void initView() {		ViewGroup view = (ViewGroup) findViewById(R.id.main_layout);		ViewUtil.zoomView(view);		edit_name = (EditText) findViewById(R.id.register_edit_name);		genderBtn = (RadioGroup) findViewById(R.id.radioGroup);		edit_mail = (EditText) findViewById(R.id.register_edit_email);		button_year = (Button) findViewById(R.id.register_button_year);		province_spinner = (Spinner) findViewById(R.id.address_spinner1);		city_spinner = (Spinner) findViewById(R.id.address_spinner2);		county_spinner = (Spinner) findViewById(R.id.address_spinner3);		edit_address = (EditText) findViewById(R.id.register_edit_address_detail);		edit_phone_optional = (EditText) findViewById(R.id.register_edit_phone);		edit_mobile_optional = (EditText) findViewById(R.id.register_edit_mobile);		edit_occupation_optional = (EditText) findViewById(R.id.register_edit_occupation);		edit_homepage_optional = (EditText) findViewById(R.id.register_edit_home_page);		edit_zipcode_optional = (EditText) findViewById(R.id.register_edit_zipcode);		edit_qq_optional = (EditText) findViewById(R.id.register_edit_qq);				btnConfirm = (Button) findViewById(R.id.btn_info_confirm);		btnClose = (Button) findViewById(R.id.btn_info_close);		btnConfirm.setOnClickListener(listener);		btnClose.setOnClickListener(listener);				button_year.setOnClickListener(onClickListener);				dateDialog = new DatePickerDialog(this, 				dateListener, 	            calendar.get(Calendar.YEAR), 	            calendar.get(Calendar.MONTH), 	            calendar.get(Calendar.DAY_OF_MONTH));   				LocalUtil.instance.select(province_spinner, R.array.province_item);		LocalUtil.instance.initPCCSpinners(province_spinner, city_spinner, county_spinner);				genderBtn.setOnCheckedChangeListener(new OnCheckedChangeListener() {			@Override			public void onCheckedChanged(RadioGroup group, int checkedId) {				if (checkedId == R.id.radioMale) {					gender = "male";				} else if (checkedId == R.id.radioFemale) {					gender = "female";				}			}		});	}	private Calendar calendar = Calendar.getInstance();	private DatePickerDialog.OnDateSetListener dateListener = new DatePickerDialog.OnDateSetListener() {		@Override		public void onDateSet(DatePicker view, int year, int monthOfYear,				int dayOfMonth) {			monthOfYear = monthOfYear + 1;			String 	str = year + getResources().getString(R.string.year) +								monthOfYear + getResources().getString(R.string.mounth) + 								dayOfMonth + getResources().getString(R.string.day);			button_year.setText(str);		}	};		private View.OnClickListener onClickListener = new View.OnClickListener() {				@Override		public void onClick(View v) {			dateDialog.show();		}	};		private  DatePickerDialog dateDialog;		private View.OnClickListener listener = new View.OnClickListener() {		@Override		public void onClick(View v) {			switch (v.getId()) {			case R.id.btn_info_confirm:				if(!isFinished) return;				isFinished = false;				send();				break;			case R.id.btn_info_close:				AccountActivity.this.finish();				overridePendingTransition(R.anim.push_left_in, R.anim.push_left_out);				break;			}		}	};	private void send() {		if(isValid()){			dialogLoading = LocalUtil.showLoadingDialog(R.string.please_wait);			SZHttpRequestManager.sharedManager().modifyAccount(data.toString(), this);		}	}		private boolean isValid() {		String birthday = button_year.getText().toString();		String name = edit_name.getText().toString();		String email = edit_mail.getText().toString();		String province = province_spinner.getSelectedItem().toString();		String city = city_spinner.getSelectedItem().toString();		String county = county_spinner.getSelectedItem().toString();		String address = edit_address.getText().toString();		String phone = edit_phone_optional.getText().toString();		String mobile = edit_mobile_optional.getText().toString();		String occupation = edit_occupation_optional.getText().toString();		String homePage = edit_homepage_optional.getText().toString();		String zip = edit_zipcode_optional.getText().toString();		String qq = edit_qq_optional.getText().toString();		if(mobile != null && !mobile.equals("")){			if (!isMobile(mobile)) {				LocalUtil.showTipDialog(R.string.incurrent_mobile);				return false;			}			}		if(phone != null && !phone.equals("")){			if (!isPhone(phone)) {				LocalUtil.showTipDialog(R.string.incurrent_phone);				return false;			}			}		if(email != null && !email.equals("")){			if (!isEmail(email)) {				LocalUtil.showTipDialog(R.string.incurrent_email);				return false;			}		}		data = new JSONObject();		try {			data.put("name", name);			data.put("email", email);			data.put("birthday", birthday);			data.put("home_town", province+","+city+","+county);			data.put("address", address);			data.put("phone", phone);			data.put("tel", mobile);			data.put("occupation", occupation);  			data.put("home_page", homePage);			data.put("zip", zip);   			data.put("qq_number", qq);			data.put("gender", gender);		} catch (JSONException e) {		}		return true;	}	private boolean isEmail(String email) {		String check = "^([a-z0-9A-Z]+[-|\\.]?)+[a-z0-9A-Z]@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\\.)+[a-zA-Z]{2,}$";		Pattern regex = Pattern.compile(check);		Matcher matcher = regex.matcher(email);		boolean isMatched = matcher.matches();		return isMatched;	}	/**	 移动：134、135、136、137、138、139、150、151、157(TD)、158、159、187、188	 联通：130、131、132、152、155、156、185、186	 电信：133、153、180、189、（1349卫通）	 **/	private static boolean isPhone(String phone){		      Pattern p = Pattern.compile("^((13[0-9])|(15[^4,\\D])|(18[0,5-9]))\\d{8}$");		      Matcher m = p.matcher(phone); 		      System.out.println(m.matches()+"---");		      return m.matches();	}	private boolean isMobile(String mobile) {		String regEx = "[1]{1}[3,5,8,6]{1}[0-9]{9}";		return Pattern.compile(regEx).matcher(mobile).find();	}	@Override	public void didFinishModifyAccount() {		dialogLoading.dismiss();		LocalUtil.showTipDialog(R.string.modify_success).		setOnDismissListener(new OnDismissListener() {						@Override			public void onDismiss(DialogInterface dialog) {				isFinished = true;  				AccountActivity.this.finish();				AccountActivity.this.				overridePendingTransition(R.anim.push_left_in, R.anim.push_left_out);			}		});	}	@Override	public void didFailedModifyAccount() {		dialogLoading.dismiss();		isFinished = true;	}}