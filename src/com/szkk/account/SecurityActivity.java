package com.szkk.account;import android.content.DialogInterface;import android.content.DialogInterface.OnDismissListener;import android.os.Bundle;import android.view.View;import android.view.ViewGroup;import android.widget.Button;import android.widget.EditText;import com.szkk.net.SZHttpRequestManager;import com.szkk.net.delegate.SecurityTaskDelegate;import com.szkk.utils.LocalUtil;import com.szkk.utils.ViewUtil;import com.szkk.widget.LoadingView;import com.szkk.www.R;import com.szkk.www.SZActivity;public class SecurityActivity extends SZActivity implements SecurityTaskDelegate{	private EditText oldPwd;	private EditText newPwd;	private EditText newPwdRepeat;	private Button closeBtn;	private Button confirmBtn;	private boolean isFinished = true;	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		this.setContentView(R.layout.activity_security);		this.initView();	}	private void initView() {		ViewGroup view = (ViewGroup) findViewById(R.id.main_layout);		ViewUtil.zoomView(view);   		newPwd = (EditText) findViewById(R.id.register_edit_pw);		newPwdRepeat = (EditText) findViewById(R.id.register_edit_rpw);		oldPwd = (EditText) findViewById(R.id.register_edit_opw);		closeBtn = (Button) findViewById(R.id.btn_security_close);		confirmBtn = (Button) findViewById(R.id.btn_security_confirm);		loadingViewCommon = (LoadingView) findViewById(R.id.loading_view_common);				closeBtn.setOnClickListener(listener);		confirmBtn.setOnClickListener(listener);	}	private View.OnClickListener listener = new View.OnClickListener() {				@Override		public void onClick(View v) {			switch(v.getId()){			case R.id.btn_security_close:				SecurityActivity.this.finish();				overridePendingTransition(R.anim.push_left_in, R.anim.push_left_out);				break;			case R.id.btn_security_confirm:				if(!isFinished){					return;				}				startLoading();				isFinished = true;				send();				break;			}		}	};		private void send() {		if (!isValid()) {			LocalUtil.showTipDialog(R.string.not_null);		} else {			String old_pwd = oldPwd.getText().toString();			String new_pwd = newPwd.getText().toString();			String new_pwd_con = newPwdRepeat.getText().toString();			SZHttpRequestManager.sharedManager().modifyPwd(old_pwd, 					new_pwd, new_pwd_con, this);		}	}	private boolean isValid() {		String oldPwdStr = oldPwd.getText().toString();		String newPwdStr = newPwd.getText().toString();		String newPwdRepeatStr = newPwdRepeat.getText().toString();		if (oldPwdStr == null || newPwdStr == null || newPwdRepeatStr == null				|| oldPwdStr.trim().equals("") || newPwdStr.trim().equals("")				|| newPwdRepeatStr.trim().equals("")) {			return false;		}		return true;	}	@Override	public void didFinishModifyPwd() {		stopLoading();		LocalUtil.showTipDialog(R.string.modify_success).		setOnDismissListener(new OnDismissListener() {						@Override			public void onDismiss(DialogInterface dialog) {				isFinished = true;  				SecurityActivity.this.finish();				SecurityActivity.this.				overridePendingTransition(R.anim.push_left_in, R.anim.push_left_out);			}		});	}	@Override	public void didFailedModifyPwd() {		stopLoading();		isFinished = true;	}}